#!/usr/bin/env python

import argparse
import os
import sys

import numpy as np

import matplotlib
# matplotlib.use('TkAgg')

import matplotlib.pyplot as plt

from espyranto.g1.plate import Plate
from espyranto.g1.mmolH import mmolH

import logging


parser = argparse.ArgumentParser(description='Espyranto command line tool.')

parser.add_argument('--org', action='store_true',
                    help='summarize the current directory')

parser.add_argument('--debug', action='store_true',
                    help='turn debugging on')

parser.add_argument('--view-plates', action='store_true',
                    help='show plate widget')

parser.add_argument('dir', nargs='*', default=[os.getcwd()])

args = parser.parse_args()

if args.debug:
    logging.basicConfig(level=logging.DEBUG)

# Summary action
# for d in args.dir:
#     if os.path.isdir(os.path.join(d, 'primary_data')):
#         p = Plate(d)
#         print(p)
#         print()
#     else:
#         print(f'{d} does not appear to be a plate')


# Org report - generate an org summary for a directory
if args.org:
    from pycse.orgmode import print_redirect

    for d in args.dir:
        print(d)
        p = Plate(d)
        with print_redirect(os.path.join(p.base, p.directory, "report.org")):
            p.org

# Other ideas?
# Add directory, commit and push?
# validate

if args.view_plates:
    for d in args.dir:
        p = Plate(d)
        mmolh = p.data['mmolH']
        from matplotlib.widgets import Slider
        from PIL import Image

        fig, ax = plt.subplots()
        fig.i = 0

        ax.imshow(Image.open(mmolh.images[0][0]))

        slider_ax = plt.axes([0.1, 0.05, 0.8, 0.05])

        slider = Slider(slider_ax,      # the axes object containing the slider
                        'i',            # the name of the slider parameter
                        0,          # minimal value of the parameter
                        len(mmolh.images) - 1,
                        valinit=0,  # initial value of the parameter
                        valfmt='%d')

        def update(i):
            '''This runs when you move the slider'''
            i = int(i)
            ax.set_title(f'{i}')
            img = Image.open(mmolh.images[i][0])
            ax.imshow(img)
            fig.i = i
            fig.canvas.draw_idle()          # redraw the plot

        def press(event):
            '''This runs when you press a key. it makes arrow keys work.'''
            sys.stdout.flush()
            if event.key == 'left':
                slider.set_val(fig.i - 1)
            elif event.key == 'right':
                slider.set_val(fig.i + 1)
            elif event.key == 'up':
                slider.set_val(fig.i + 10)
            elif event.key == 'down':
                slider.set_val(fig.i - 10)

            fig.canvas.draw()

        fig.canvas.mpl_connect('key_press_event', press)
        slider.on_changed(update)
        plt.show()
