#+title: Espyranto

* Installation

Note: if you plan to do any development on this, see [[*Development]].

I recommend you install like this. Go to a directory on your python path and run these commands.

#+BEGIN_SRC sh
git clone git@github.com:espyranto/espyranto.git
pip install -e espyranto
#+END_SRC

I am pretty sure you can update espyranto later by just going to the directory and running:

#+BEGIN_SRC sh
git pull
#+END_SRC


* Development

We are currently working on "Generation 1" espyranto. This code is located in [[./espyranto/g1/]].

This will have an a Plate class to read from a directory to get the compositions of the wells, and the kinetic data that Eric Lopato has derived from image analysis.

If you want to develop on this, I suggest you fork espyranto on Github, and then install your fork. You can create pull requests to merge your development into the main code. This takes some skills and practice, so please start with small changes, and talk to Dr. Kitchin about how to do it before investing a lot of time in it.

1. Make a new branch off the master of your fork
2. Make a set of changes in your branch
3. Push your branch to your fork
4. Go to Github and make a pull request off the fork
5. We will review the request, and if it is ok, merge it
6. Then, you would update your master which now should have your updates in it.

It is a little tricky working with branches and forks. We can add documentation here as needed to at least make it simpler.


* Reporting issues

Please report issues at https://github.com/espyranto/espyranto/issues.


* Plugins

This is a way to find plugins by their name. You have to have installed these, and they are separate packages. This is code that might go in the espyranto package to automatically load these.

#+BEGIN_SRC python
from espyranto.g1.plate import Plate
from espyranto.g1.mmolH import mmolH

p = Plate('../../../../../../Desktop/generation-1-data/02/BicolCorow/')
print(p[0, 10])
#+END_SRC

#+RESULTS:
#+begin_example
{'row': 0, 'col': 10, 'A': 0.6, 'B': 0.0, 'data': {'mmolH': array([0.        , 0.        , 0.04546052, 0.        , 0.        ,
       0.04693436, 0.09298058, 0.        , 0.        , 0.12889259,
       0.        , 0.        , 0.        , 0.        , 0.        ,
       0.        , 0.        , 0.        , 0.        , 0.19038552,
       0.12388882, 0.        , 0.        , 0.        , 0.        ,
       0.03211115, 0.        , 0.        , 0.01473072, 0.        ,
       0.        , 0.04988252, 0.        , 0.39468199, 0.26825357,
       0.16573633, 0.17056962, 0.22627644, 0.        , 0.28118126,
       0.        , 0.01041208, 0.33235631, 0.        , 0.16257702,
       0.41160885, 0.13269298, 0.28333706, 0.31458762, 0.28146243,
       0.34383833, 0.39704482, 0.16276284, 0.62684812, 0.37551089,
       0.03873815, 0.76682365, 0.33837846, 0.33094525, 0.        ,
       0.        , 0.        , 0.        , 0.        , 0.        ,
       0.        , 0.        , 0.        , 0.        , 0.        ,
       0.        , 0.        , 0.        , 0.        ])}}
#+end_example




* TODO Using this at NERSC




* Generation 1 example usage

This example assumes you have installed espyranto on your path.

You have to set the timestep for the images. There is not currently a way to derive these that is complete. This timestep should be the amount of time the wells are illuminated between each image.

Note, a simple way to get machine-readable key/value pairs in the metadata is to add cells in the Parameters column with contents like 'A = Pd'. This class will parse that into the metadata dictionary.

#+BEGIN_SRC ipython :restart
from espyranto.g1.plate import Plate
from espyranto.g1.mmolH import mmolH

%matplotlib inline
import matplotlib.pyplot as plt

p = Plate('/Users/jkitchin/Desktop/generation-1-data/03/RucolCurow-I/')

print(p)
#+END_SRC

#+RESULTS:
:results:
# Out [1]:
# output
RucolCurow-I
H2 Evo - Alloy Nanopart.
2019-03-21 00:00:00
Ru Columns CuI Rows
In DMSO
10:1 solvent to water
TEOA
Solution Volume (mL)
0.45
A=Ru
B=Cu

mmolH data
  100 images were acquired.
  Start time: 2019-03-21 20:24:33
  End time: 2019-03-22 13:02:46
  The timestep is 600 s
  mmolH data has shape: (96, 74)


:end:


Here we can access the 'A' element of the metadata because there is a cell containing 'A=Pd' in the Parameters column of the Excel spreadsheet.

#+BEGIN_SRC ipython
p.metadata['A']
#+END_SRC

#+RESULTS:
:results:
# Out [2]:
# text/plain
: 'Ru'
:end:

Composition in row 0:

#+BEGIN_SRC ipython
for i, (a, b) in enumerate(zip(p.A.reshape(p.nrows, p.ncols)[0],
                               p.B.reshape(p.nrows, p.ncols)[0])):
    print(f'col {i:2d}  {p.metadata["A"]} {a:5.2f}, {p.metadata["B"]} {b:5.2f}')
#+END_SRC

#+RESULTS:
:results:
# Out [3]:
# output
col  0  Ru  0.00, Cu  0.00
col  1  Ru  0.05, Cu  0.00
col  2  Ru  0.10, Cu  0.00
col  3  Ru  0.15, Cu  0.00
col  4  Ru  0.20, Cu  0.00
col  5  Ru  0.25, Cu  0.00
col  6  Ru  0.30, Cu  0.00
col  7  Ru  0.35, Cu  0.00
col  8  Ru  0.40, Cu  0.00
col  9  Ru  0.50, Cu  0.00
col 10  Ru  0.60, Cu  0.00
col 11  Ru  0.65, Cu  0.00

:end:


** Max functions

#+BEGIN_SRC ipython
mmolH = p.data['mmolH']
mmolH.maxh()
#+END_SRC

#+RESULTS:
:results:
# Out [4]:
# text/plain
: (50, 26.21087877096682)
:end:

** Plots

#+BEGIN_SRC ipython
mmolH.plot_mmolH(23)
#+END_SRC

#+RESULTS:
:results:
# Out [5]:
# text/plain
: <Figure size 432x288 with 1 Axes>

# image/png
[[file:obipy-resources/73c308900d8ba1060170533b02065ff9d6a23af3/3395db1cf1e03e598dd38413083085ec2f92b4e5.png]]
:end:

#+BEGIN_SRC ipython
mmolH.plot_mmolH([1, 11])
#+END_SRC

#+RESULTS:
:results:
# Out [6]:
# text/plain
: <Figure size 432x288 with 1 Axes>

# image/png
[[file:obipy-resources/73c308900d8ba1060170533b02065ff9d6a23af3/3395db1cf1e03e598dd38413083085ec2f92b4e5.png]]
:end:

#+BEGIN_SRC ipython
mmolH.plot_mmolH_grid();  # ; suppresses a lot of matplotlib output
#+END_SRC

#+RESULTS:
:results:
# Out [7]:
# text/plain
: <Figure size 576x864 with 96 Axes>

# image/png
[[file:obipy-resources/73c308900d8ba1060170533b02065ff9d6a23af3/87cea271c4e1719bf84a4abf223fbf9855948773.png]]
:end:

#+BEGIN_SRC ipython
mmolH.plot_mmolH_max()
#+END_SRC

#+RESULTS:
:results:
# Out [8]:
# text/plain
: <Figure size 432x288 with 2 Axes>

# image/png
[[file:obipy-resources/73c308900d8ba1060170533b02065ff9d6a23af3/366dfc8743501d5cbcf3cd25d602f1c67557b7be.png]]
:end:

#+BEGIN_SRC ipython
mmolH.plot_mmolH_max_contourf()
#+END_SRC

#+RESULTS:
:results:
# Out [9]:


# text/plain
: <Figure size 432x288 with 2 Axes>

# image/png
[[file:obipy-resources/73c308900d8ba1060170533b02065ff9d6a23af3/9a51f9a7f72c96595b780125d96b87312c577910.png]]
:end:

** See plates

#+BEGIN_SRC ipython
mmolH.show_plate(20)
#+END_SRC

#+RESULTS:
:results:
# Out [10]:


# text/plain
: <Figure size 432x288 with 1 Axes>

# image/png
[[file:obipy-resources/73c308900d8ba1060170533b02065ff9d6a23af3/8d98ea49a8a0e6183ed779667d5ff595ab3b0e8e.png]]
:end:

#+BEGIN_SRC ipython
mmolH.show_plate(slice(0, -1, 20));
#+END_SRC

#+RESULTS:
:results:
# Out [11]:
# text/plain
: <Figure size 432x288 with 5 Axes>

# image/png
[[file:obipy-resources/73c308900d8ba1060170533b02065ff9d6a23af3/ec0009ef45bbc93584c5373199afad880c927ae5.png]]
:end:

** TODO plots of maxH/max rate in the plate as function of various compositions

These are reduced dimension plots. For example, here we plot maxH vs mole fraction of Ru in a scatter plot, where the size of the circle is related to the total concentration of metals.

#+BEGIN_SRC ipython
import numpy as np
tot = p.A + p.B
x = p.A / np.where(tot > 0, tot, 1) # one cell is empty as a control
plt.scatter(x, np.max(mmolH.mmolH, axis=1), (p.A + p.B) * 200, alpha=0.5)
plt.xlabel(f'$x_{{{p.metadata["A"]}}}$')
plt.ylabel('Max H2 formed')
#+END_SRC

#+RESULTS:
:results:
# Out [12]:
# text/plain
: Text(0, 0.5, 'Max H2 formed')

# text/plain
: <Figure size 432x288 with 1 Axes>

# image/png
[[file:obipy-resources/73c308900d8ba1060170533b02065ff9d6a23af3/4abc664dc47b58be22eae7cc25df6a3b8b78f189.png]]
:end:

This suggests Ru is not very good, Cu gets better with increasing concentration, and together they are much better than you would expect.

** TODO Movies - these functions are not working yet

#+BEGIN_SRC ipython
p.movie_ffmpeg()
#+END_SRC


#+BEGIN_SRC ipython
p.movie_imagemagick()
#+END_SRC

** TODO Work out how to estimate a rate

Eric used a smoothed function for this.

I think Kirby has been fitting a first order rate law, maybe with a delay. That will not always work, some data does not look like that.

** TODO Work out the delay

Many of these show some period of no activity before there is an onset. We should develop a way to estimate what that is so we can see what factors affect it.
